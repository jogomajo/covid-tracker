{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.tsx","api/index.ts","components/Chart/Chart.tsx","components/CountryPicker/CountryPicker.tsx","images/image.png","App.tsx","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","cardsDetails","title","description","class","styles","infected","value","className","container","Grid","spacing","justify","map","card","item","component","Card","xs","md","cx","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","setData","setCountry","fetchedData","src","covidImage","alt","image","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a851f60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__sl4Ta\",\"card\":\"Cards_card__IykRH\",\"infected\":\"Cards_infected__3gxU1\",\"recovered\":\"Cards_recovered__2iGTx\",\"deaths\":\"Cards_deaths__2Yd2k\"};","import React from \"react\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\ninterface IProps {\r\n  data: {\r\n    confirmed: {\r\n      value: number;\r\n    };\r\n    recovered: {\r\n      value: number;\r\n    };\r\n    deaths: {\r\n      value: number;\r\n    };\r\n    lastUpdate: string;\r\n  };\r\n}\r\n\r\nconst Cards: React.FC<IProps> = ({\r\n  data: { confirmed, recovered, deaths, lastUpdate },\r\n}) => {\r\n  if (!confirmed) {\r\n    return <p>\"loading...\"</p>;\r\n  }\r\n\r\n  const cardsDetails = [\r\n    {\r\n      title: \"Infected\",\r\n      description: \"Number of active cases of COVID-19\",\r\n      class: styles.infected,\r\n      value: confirmed.value,\r\n    },\r\n    {\r\n      title: \"Recovered\",\r\n      description: \"Number of recoveries from COVID-19\",\r\n      class: styles.recovered,\r\n      value: recovered.value,\r\n    },\r\n    {\r\n      title: \"Deaths\",\r\n      description: \"Number of deaths caused by COVID-19\",\r\n      class: styles.deaths,\r\n      value: deaths.value,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        {cardsDetails.map((card) => (\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs={12}\r\n            md={3}\r\n            className={cx(styles.card, card.class)}\r\n            key={card.title}\r\n          >\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                {card.title}\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={card.value}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">{card.description}</Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nimport {\r\n  SingleCountryData,\r\n  GlobalDailyData,\r\n  ModifiedGlobalDailyData,\r\n} from \"../interfaces/interfaces\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (\r\n  country?: string\r\n): Promise<SingleCountryData | undefined> => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async (): Promise<\r\n  ModifiedGlobalDailyData[] | undefined\r\n> => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData: GlobalDailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async (): Promise<string[] | undefined> => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country: { name: string }) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport { fetchDailyData } from \"../../api\";\r\n\r\nimport { ModifiedGlobalDailyData } from \"../../interfaces/interfaces\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\ninterface IProps {\r\n  data: {\r\n    confirmed: { value: number };\r\n    recovered: { value: number };\r\n    deaths: { value: number };\r\n  };\r\n  country: string;\r\n}\r\n\r\nconst Chart: React.FC<IProps> = ({\r\n  data: { confirmed, recovered, deaths },\r\n  country,\r\n}) => {\r\n  const [dailyData, setDailyData] = useState<\r\n    ModifiedGlobalDailyData[] | undefined\r\n  >();\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\ninterface IProps {\r\n  handleCountryChange: (country: string) => Promise<void>;\r\n}\r\n\r\nconst CountryPicker: React.FC<IProps> = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState<\r\n    string[] | undefined\r\n  >();\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\r\n          handleCountryChange(e.target.value)\r\n        }\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries\r\n          ? fetchedCountries.map((country, i) => (\r\n              <option key={i} value={country}>\r\n                {country}\r\n              </option>\r\n            ))\r\n          : null}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport { fetchData } from \"./api/index\";\r\n\r\nimport { SingleCountryData } from \"./interfaces/interfaces\";\r\n\r\nimport covidImage from \"./images/image.png\";\r\n\r\nimport styles from \"./App.module.css\";\r\n\r\nconst App: React.FC = () => {\r\n  const [data, setData] = useState<SingleCountryData | undefined>();\r\n  const [country, setCountry] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedData = await fetchData();\r\n\r\n      setData(fetchedData);\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const handleCountryChange = async (country: string) => {\r\n    const fetchedData = await fetchData(country);\r\n\r\n    setData(fetchedData);\r\n    setCountry(country);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <img src={covidImage} alt=\"COVID-19\" className={styles.image} />\r\n      {data ? <Cards data={data} /> : null}\r\n      <CountryPicker handleCountryChange={handleCountryChange} />\r\n      {data ? <Chart data={data} country={country} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__wgd7X\",\"image\":\"App_image__3IpjJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__27bIj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__qXurz\"};"],"sourceRoot":""}